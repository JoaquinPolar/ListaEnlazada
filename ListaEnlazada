#include<iostream>
using namespace std;
class Node
{
	public:
		int key;
		int data;
		Node *next;
		Node(){
			key=0;
			data=0;
			next=NULL;
		}
		Node(int k,int d){
			key = k;
			data = d;
		}

};
class LinkedList{
	public:
		Node* head;

		LinkedList(){
			head=NULL;
		}
		LinkedList(Node *n){
			head=n;
		}
		// Verifica si el nodo existe usando key
		Node* NodeExists(int k){
			Node* temp=NULL;
			Node* ptr=head;
			while(ptr!=NULL){
				if(ptr->key==k){
					temp=ptr;
				}
				ptr= ptr->next;
			}
			return temp;
		}
		//Agregar un nodo a la lista
		void appendNode(Node *n){
			if(NodeExists(n->key)!=NULL){
				cout<<"El nodo ya existe con el valoy key: "<<n->key<<".Agrega otro nodo con u valor diferente de key"<<endl;
			}
			else{
				if(head==NULL){
					head=n;
					cout<<"Nodo agregado"<<endl;
				}
				else{
					Node* ptr=head;
					while(ptr->next!=NULL){
						ptr=ptr->next;
					}
					ptr->next=n;
					cout<<"Nodo agregado"<<endl;
				}
			}

		}
		//Anteponer nodo- Adjuntar nodo al comienzo
		void prependNode(Node* n){
			if(NodeExists(n->key)!=NULL){
				cout<<"El nodo ya existe con el valoy key: "<<n->key<<".Agrega otro nodo con u valor diferente de key"<<endl;
			}
			else{
				n->next=head;
				head=n;
				cout<<"Nodo antepuesto";
			}
		}
		//Insertar un Nodo despues de un nodo particular en la lista
		void InsertNodeAfter(int k,Node *n){
			Node* ptr=NodeExists(k);
			if(ptr==NULL){
				cout<<"No existe un nodo con este valor key";
			}
			else{
				if(NodeExists(n->key)!=NULL){
				cout<<"El nodo ya existe con el valoy key: "<<n->key<<".Agrega otro nodo con u valor diferente de key"<<endl;
				}
				else{
					n->next=ptr->next;
					ptr->next=n;
					cout<<"Nodo Insertado"<<endl;
				}
			}
		}
		//Eliminar un nodo por un unico valor key
		void DeleteNodeByKey(int k){
			if(head==NULL){
				cout<<"Lista enlazada vacia. No se puede Eliminar: "<<endl;
			}
			else if(head!=NULL){
				if(head->key == k){
					head=head->next;
					cout<<"Nodo no vinculado a valor key: "<<k<<endl;
				}
				else{
					Node* temp=NULL;
					Node* prevptr=head;
					Node* currentptr=head->next;
					while(currentptr!=NULL){
						if(currentptr->key==k){
							temp=currentptr;
							currentptr=NULL;
						}
						else{
							prevptr=prevptr->next;
							currentptr=currentptr->next;
						}
					}
					if(temp!=NULL){
						prevptr->next=temp->next;
						cout<<"Nodo no vinculado a valor key: "<<k<<endl;
					}
					else{
						cout<<"Nodo no existe con el valor key: "<<k<<endl;
					}
				}
			}

		}
		//actualizar Nodo
		void UpdateNodeByKey(int k,int d){
			Node* ptr=NodeExists(k);
			if(ptr!=NULL){
				ptr->data=d;
				cout<<"La data del nodo a sido actualizada con exito"<<endl;
			}
			else{
				cout<<"Nodo no existe con el valor key: "<<k<<endl;
			}
		}
		//imprimir
		void printList(){
			if(head==NULL){
				cout<<"No hay nodos en la lista enlazada"<<endl;
			}
			else{
				cout<<endl<<"Valores de la lista enlazada: ";
				Node* temp=head;
				while(temp!=NULL){
					cout<<"("<<temp->key<<","<<temp->data<<") --> ";
					temp=temp->next;
				}
			}
		}



};
int main(){
	LinkedList s;
	int option;
	int key1,k1,data1;
	do{
		cout<<"\nQue accion desea realizar? Seleccione el numero de opcion. Presione 0 para salir";
		cout<<"1. AgregarNodo()"<<endl;
		cout<<"2. AnteponerNodo()"<<endl;
		cout<<"3. InsertarNodoDespues()"<<endl;
		cout<<"4. EliminarNodoPorUnValorKey()"<<endl;
		cout<<"5. ActualizarNodoPorUnValorKey()"<<endl;
		cout<<"6. Imprimir()"<<endl;
		cout<<"7. LimpiarPantalla()"<<endl;

		cin>>option;
		Node* n1=new Node();
		//Nodo n1
		switch(option){
		case 0:
			break;
		case 1:
			cout<<"Introdusca la key y la data del nodo a agregar"<<endl;
			cin>>key1;
			cin>>data1;
			n1->key=key1;
			n1->data=data1;
			s.appendNode(n1);
			//cout<<n1.key<<" = "<<n1.data<<endl;
			break;
		case 2:
			cout<<"Introdusca la key y la data del nodo a Anteponer"<<endl;
			cin>>key1;
			cin>>data1;
			n1->key=key1;
			n1->data=data1;
			s.prependNode(n1);
			break;
		case 3:
			cout<<"Introduzca la tecla del nodo existente despuÃ©s del cual desea insertar este nuevo nodo:"<<endl;
			cin>>k1;
			cout<<"Introduzca la key y la data del nuevo Nodo Primero"<<endl;
			cin>>key1;
			cin>>data1;
			n1->key=key1;
			n1->data=data1;

			s.InsertNodeAfter(k1,n1);
			break;
		case 4:
			cout<<"Introduzca la key del Nodo a enliminar: "<<endl;
			cin>>k1;
			s.DeleteNodeByKey(k1);
			break;
		case 5:
			cout<<"Introduzca la key y la nueva data para actualizar: "<<endl;
			cin>>key1;
			cin>>data1;
			s.UpdateNodeByKey(key1,data1);
			break;
		case 6:
			s.printList();

			break;
		case 7:
			system("cls");
			break;
		default:
			cout<<"Presione un Numero adecuado"<<endl;
		}

	}while(option!=0);

	return 0;
}
